{"version":3,"file":"static/js/965.039e4e0e.chunk.js","mappings":"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","sources":["components/Content/Country.tsx","components/Content/Details.tsx","components/Content/Filter.tsx","components/SearchBar.tsx","components/Content/Countries.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface Props {\n  flag: string;\n  name: string;\n  population: number;\n  region: string;\n  capital: string;\n  toggleDetails: Function;\n}\n\nconst Country = (props: Props) => {\n  const { flag, name, population, region, capital, toggleDetails } = props;\n\n  const stringedPopulation = population\n    .toString()\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  return (\n    <div onClick={() => toggleDetails(name)} className=\"country\">\n      <img className=\"country__flag\" src={flag} alt={`${name} flag`} />\n      <div className=\"country__content\">\n        <h1 className=\"name\"> {name} </h1>\n        <div className=\"stats\">\n          <p className=\"stat\">\n            Population: <span className=\"value\">{stringedPopulation}</span>{\" \"}\n          </p>\n          <p className=\"stat\">\n            Region: <span className=\"value\">{region}</span>{\" \"}\n          </p>\n          <p className=\"stat\">\n            Capital: <span className=\"value\">{capital}</span>{\" \"}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Country;\n","import ICountry from \"../../models/ICountry\";\nimport { BsArrowLeft } from \"react-icons/bs\";\nimport { useContext } from \"react\";\nimport Context from \"../../Context/CountriesContext\";\n\ninterface Props {\n  country: ICountry;\n  toggleDetails: Function;\n}\n\nconst Details = (props: Props) => {\n  const { countries } = useContext(Context);\n  const { country, toggleDetails } = props;\n  const {\n    name,\n    region,\n    population,\n    capital,\n    topLevelDomain,\n    flag,\n    nativeName,\n    subregion,\n    currencies,\n    languages,\n    borders,\n  } = country;\n\n  const spreadLangs = languages.map((lang, i) => {\n    let lastLang = i + 1 === languages.length;\n    let { name } = lang;\n\n    return (\n      <span key={i} className=\"value\">\n        {!lastLang ? `${name}, ` : `${name}`}\n      </span>\n    );\n  });\n\n  const borderCountries = borders?.slice(0, 3)?.map((border: string, id) => {\n    let match = countries.filter((coun: ICountry) => {\n      if (border === coun.alpha3Code) return coun.name;\n    });\n    let name = match[0].name;\n\n    return (\n      <p onClick={() => toggleDetails(name)} key={id} className=\"border\">\n        {name}\n      </p>\n    );\n  });\n\n  const stringedPopulation = population\n    .toString()\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  return (\n    <div className=\"details\">\n      <button className=\"details__back\" onClick={() => toggleDetails()}>\n        <BsArrowLeft /> Back\n      </button>\n      <div className=\"details__content\">\n        <img className=\"dContent__flag\" src={flag} alt={`${name} flag`} />\n        <div className=\"desktop__dContent\">\n          <h1 className=\"dContent__country\"> {name} </h1>\n          <div className=\"desktop__stats\">\n            <div className=\"dContent__stats\">\n              <p className=\"stat\">\n                Natvie Name: <span className=\"value\">{nativeName}</span>{\" \"}\n              </p>\n              <p className=\"stat\">\n                Population: <span className=\"value\">{stringedPopulation}</span>{\" \"}\n              </p>\n              <p className=\"stat\">\n                Region: <span className=\"value\">{region}</span>{\" \"}\n              </p>\n              <p className=\"stat\">\n                Sub Region: <span className=\"value\">{subregion}</span>{\" \"}\n              </p>\n              <p className=\"stat\">\n                Capital: <span className=\"value\">{capital}</span>{\" \"}\n              </p>\n            </div>\n            <div className=\"dContent__stats2\">\n              <p>\n                Top Level Domain:{\" \"}\n                <span className=\"value\"> {topLevelDomain} </span>\n              </p>\n              <p>\n                Currenices:{\" \"}\n                <span className=\"value\"> {currencies[0].name} </span>\n              </p>\n              <p>Languages: {spreadLangs}</p>\n            </div>\n          </div>\n          <div className=\"dContent__borders\">\n            <h2 className=\"dcb__title\">Border Countries:</h2>\n            <div className=\"dcb__wrapper\">{borderCountries}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Details;\n","import React, { useContext, useState } from \"react\";\nimport { MdKeyboardArrowDown } from \"react-icons/md\";\nimport Context from \"../../Context/CountriesContext\";\n\nconst Filter = () => {\n  const { selectedRegion, setSelectedRegion } = useContext(Context);\n  const [showOptions, setShowOptions] = useState(false);\n\n  const options = [\n    \"Filter by Region\",\n    \"Africa\",\n    \"Americas\",\n    \"Asia\",\n    \"Europe\",\n    \"Oceania\",\n  ];\n\n  const option = options.map((opt: string, id) => {\n    return (\n      <div\n        className={opt !== selectedRegion ? \"option\" : \"option selected\"}\n        key={id}\n      >\n        <label\n          htmlFor={opt}\n          className=\"label\"\n          onClick={(e: any) => setSelectedRegion(e.target.htmlFor)}\n        >\n          {opt === \"Filter by Region\" ? \"Reset\" : opt}\n        </label>\n        <input\n          className=\"radio\"\n          type=\"radio\"\n          name=\"options\"\n          id={opt}\n          value={opt}\n        />{\" \"}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"filter\">\n      <div\n        onClick={() => setShowOptions((prev) => !prev)}\n        className=\"filter__select\"\n      >\n        <p className=\"current\">{selectedRegion}</p>\n        <MdKeyboardArrowDown className=\"arrow\" />\n\n        {showOptions && <div className=\"options\">{option}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Filter;\n","import { useContext } from \"react\";\nimport { HiOutlineSearch } from \"react-icons/hi\";\nimport Context from \"../Context/CountriesContext\";\n\nconst SearchBar = () => {\n  const { userInput, setUserInput } = useContext(Context);\n\n  return (\n    <form className=\"search\">\n      <HiOutlineSearch className=\"search__icon\" />\n      <input\n        value={userInput}\n        className=\"search__input\"\n        type=\"text\"\n        placeholder=\"Search for a country...\"\n        onChange={(e) => setUserInput(e.target.value.toLowerCase())}\n      />\n    </form>\n  );\n};\n\nexport default SearchBar;\n","import { useContext, useState } from \"react\";\nimport Context from \"../../Context/CountriesContext\";\nimport Country from \"./Country\";\nimport ICountry from \"../../models/ICountry\";\nimport Details from \"./Details\";\nimport Filter from \"./Filter\";\nimport SearchBar from \"../SearchBar\";\n\nconst Countries = () => {\n  const { countries, selectedRegion, userInput } = useContext(Context);\n  const [showDetails, setShowDetails] = useState(false);\n  const [selectedCountry, setSelectedCountry] = useState<\n    JSX.Element | undefined\n  >();\n\n  function toggleDetails(name: string) {\n    if (name) {\n      setShowDetails(true);\n      countries.map((country: ICountry, id: number) => {\n        if (name === country.name) {\n          setSelectedCountry(\n            <Details key={id} toggleDetails={toggleDetails} country={country} />\n          );\n        }\n        return undefined;\n      });\n    } else setShowDetails(false);\n  }\n\n  const displayCountries = countries\n    .filter((country: ICountry) => {\n      const { region } = country;\n\n      if (selectedRegion === \"Filter by Region\") return country;\n      else if (selectedRegion === region) return country;\n      else return undefined;\n    })\n\n    .filter((country: ICountry) => {\n      const { name } = country;\n      const lowerCasedCountry = name.toLowerCase();\n\n      if (userInput === \"\") return country;\n      else if (lowerCasedCountry.includes(userInput)) return country;\n    })\n\n    .map((country: ICountry, id: number) => {\n      const { flag, name, region, capital, population } = country;\n\n      return (\n        <Country\n          key={id}\n          name={name}\n          flag={flag}\n          region={region}\n          capital={capital}\n          population={population}\n          toggleDetails={toggleDetails}\n        />\n      );\n    });\n\n  return (\n    <section className=\"countries\">\n      {!showDetails && (\n        <>\n          <div className=\"desktop__search\">\n            <SearchBar />\n            <Filter />\n          </div>\n          <div className=\"desktop__countries\">{displayCountries}</div>\n        </>\n      )}\n      {showDetails && selectedCountry}\n    </section>\n  );\n};\n\nexport default Countries;\n"],"names":["props","flag","name","population","region","capital","toggleDetails","stringedPopulation","toString","replace","onClick","className","src","alt","countries","useContext","Context","country","topLevelDomain","nativeName","subregion","currencies","languages","borders","spreadLangs","map","lang","i","lastLang","length","borderCountries","slice","border","id","filter","coun","alpha3Code","selectedRegion","setSelectedRegion","useState","showOptions","setShowOptions","option","opt","htmlFor","e","target","type","value","prev","userInput","setUserInput","placeholder","onChange","toLowerCase","showDetails","setShowDetails","selectedCountry","setSelectedCountry","displayCountries","lowerCasedCountry","includes"],"sourceRoot":""}